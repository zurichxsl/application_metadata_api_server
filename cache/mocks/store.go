// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	api "application_metadata_api_server/server/api"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// Add provides a mock function with given fields: app, raw
func (_m *Store) Add(app *api.App, raw []byte) (api.Id, error) {
	ret := _m.Called(app, raw)

	var r0 api.Id
	if rf, ok := ret.Get(0).(func(*api.App, []byte) api.Id); ok {
		r0 = rf(app, raw)
	} else {
		r0 = ret.Get(0).(api.Id)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.App, []byte) error); ok {
		r1 = rf(app, raw)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Store) Get(id api.Id) ([]byte, error) {
	ret := _m.Called(id)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(api.Id) []byte); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(api.Id) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: value, fields
func (_m *Store) Search(value string, fields ...string) []api.Id {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, value)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []api.Id
	if rf, ok := ret.Get(0).(func(string, ...string) []api.Id); ok {
		r0 = rf(value, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Id)
		}
	}

	return r0
}

// SearchStruct provides a mock function with given fields: app
func (_m *Store) SearchStruct(app *api.App) ([]api.Id, error) {
	ret := _m.Called(app)

	var r0 []api.Id
	if rf, ok := ret.Get(0).(func(*api.App) []api.Id); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Id)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.App) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
